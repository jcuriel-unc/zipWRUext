nrow(pa_rej2weekly)
View(pa_rej2weekly)
sum(pa_rej2weekly$requests)
sum(pa_rej2weekly$total)
sort(unique(pa_rej2$statusreason))
table(pa_rej2$statusreason)
pa_rej2 <- subset(pa_rej2, statusreason!="DECL - DUPLICATE APPLICATION")
pa_rej2 <- subset(pa_rej2, statusreason!="DECL - AFTER DEADLINE")
table(pa_rej2$statusreason)
pa_rej2weekly <- pa_rej2 %>% group_by(week_num,request_date) %>% summarise(total=sum(dum),white=sum(pred.whi),black=sum(pred.bla),
hispanic=sum(pred.his),
asian=sum(pred.asi),other=sum(pred.oth))
pa_rej2weekly$other= pa_rej2weekly$hispanic+pa_rej2weekly$asian+pa_rej2weekly$other
pa_rej2weekly <- subset(pa_rej2weekly, select=-c(hispanic,asian))
nrow(pa_rej2weekly)
pa_requests_all2 <- subset(pa_requests_all2, select=-c(request_date))
pa_rej2weekly <- merge(pa_rej2weekly, pa_requests_all2, by.x="week_num",by.y="sent_week_num")
View(pa_rej2weekly)
pa_rej2 <- subset(pa_rej2, statusreason!="DECL - NOT REGISTERED")
sort(unique(pa_rej2$statusreason))
table(pa_rej2$statusreason)
pa_rej2weekly <- pa_rej2 %>% group_by(week_num,request_date) %>% summarise(total=sum(dum),white=sum(pred.whi),black=sum(pred.bla),
hispanic=sum(pred.his),
asian=sum(pred.asi),other=sum(pred.oth))
pa_rej2weekly$other= pa_rej2weekly$hispanic+pa_rej2weekly$asian+pa_rej2weekly$other
pa_rej2weekly <- subset(pa_rej2weekly, select=-c(hispanic,asian))
nrow(pa_rej2weekly)
pa_requests_all2 <- subset(pa_requests_all2, select=-c(request_date))
pa_rej2weekly <- merge(pa_rej2weekly, pa_requests_all2, by.x="week_num",by.y="sent_week_num")
View(pa_rej2weekly)
?gather
pa_rej3weekly <- gather(pa_rej2weekly, key="race3", value = "rejected", white:other)
View(pa_rej3weekly)
pa_rej2weekly_race <- gather(pa_rej2weekly, key="race3", value = "rejected", white:other)
View(pa_rej3weekly)
colnames(pa_rej2weekly)[colnames(pa_rej2weekly)=="total"] <- "rejections"
pa_rej2weekly$rej_pct <- (pa_rej2weekly$rejections/pa_rej2weekly$returns)*100
pa_rej2weekly_race$rej_pct <- (pa_rej2weekly_race$rejected/pa_rej2weekly_race$returns)*100
summary(pa_rej2weekly$rej_pct)
summary(pa_rej2weekly_race$rej_pct)
pa_rej2weekly$rej_pct <- (pa_rej2weekly$rejections/(pa_rej2weekly$returns+pa_rej2weekly$rejections))*100
pa_rej2weekly_race$rej_pct <- (pa_rej2weekly_race$rejected/(pa_rej2weekly_race$returns+pa_rej2weekly_race$rejected))*100
summary(pa_rej2weekly$rej_pct)
summary(pa_rej2weekly_race$rej_pct)
View(pa_rej2weekly)
names(pa_rej2weekly)
race_pa_plot_rej_pct <- ggplot(pa_rej2weekly_race, aes(y=rej_pct, x=request_date, color=race3)) +
geom_line(lwd=1.2) +
theme_minimal() +
geom_point(aes(x=date2, y=rej_pct,size=returns), alpha=0.7) +
labs(title="Percentage of this week's returns that were \nnot accepted for counting, by race",x="Week",y="%",color="Race",
caption = caption_date) +
scale_color_manual(values = medsl_brands[c(1,2,3)],drop=F) + guides(size=FALSE) +
theme_medsl2date + requests_x_scale + scale_y_continuous(label=comma, limits = c(0,25))
race_pa_plot_rej_pct
race_pa_plot_rej_pct <- ggplot(pa_rej2weekly_race, aes(y=rej_pct, x=request_date, color=race3)) +
geom_line(lwd=1.2) +
theme_minimal() +
geom_point(aes(size=returns), alpha=0.7) +
labs(title="Percentage of this week's returns that were \nnot accepted for counting, by race",x="Week",y="%",color="Race",
caption = caption_date) +
scale_color_manual(values = medsl_brands[c(1,2,3)],drop=F) + guides(size=FALSE) +
theme_medsl2date + requests_x_scale + scale_y_continuous(label=comma, limits = c(0,25))
race_pa_plot_rej_pct
View(pa_rej2weekly_race)
all_pa_plot_weekrej_pct <- ggplot(pa_rej2weekly, aes(y=rej_pct, x=request_date)) +
geom_line(lwd=1.2,color=medsl_brands[c(1)]) +
theme_minimal() +
geom_point(aes(size=returns),color=medsl_brands[c(1)],  alpha=0.7) +
labs(title="Weekly percentage of returned ballots that \nhave not been accepted for counting",x="Week",y="%",
caption = caption_date)  + guides(size=FALSE) +
theme_medsl2date + requests_x_scale + scale_y_continuous(label=comma, limits = c(0,15))
all_pa_plot_cumrej_pct
all_pa_plot_weekrej_pct
all_pa_plot_weekrej_pct <- ggplot(pa_rej2weekly, aes(y=rej_pct, x=request_date)) +
geom_line(lwd=1.2,color=medsl_brands[c(1)]) +
theme_minimal() +
geom_point(aes(size=returns),color=medsl_brands[c(1)],  alpha=0.7) +
labs(title="Weekly percentage of returned ballots that \nhave not been accepted for counting",x="Week",y="%",
caption = caption_date)  + guides(size=FALSE) +
theme_medsl2date + requests_x_scale + scale_y_continuous(label=comma, limits = c(0,25))
all_pa_plot_weekrej_pct
pa_rej2weekly$cumrej <- cumsum(pa_rej2weekly$rejections)
pa_rej2weekly$cumreturns1<- cumsum(pa_rej2weekly$returns)
pa_rej2weekly$cumrej_pct <- (pa_rej2weekly$cumrej/(pa_rej2weekly$cumrej+pa_rej2weekly$cumreturns1))*100
pa_rej2weekly_race$weekly_rej_prop <- (pa_rej2weekly_race$rejected/pa_rej2weekly_race$total)*100
pa_rej2weekly_race <- pa_rej2weekly_race %>% group_by(race3) %>% mutate(cum_rejected_race =cumsum(rejected),
cum_total=cumsum(total))
pa_rej2weekly_race$cumrej_pct_prop <- (pa_rej2weekly_race$cum_rejected_race/cum_total)*100
pa_rej2weekly_race$cumrej_pct_prop <- (pa_rej2weekly_race$cum_rejected_race/pa_rej2weekly_race$cum_total)*100
summary(pa_rej2weekly_race$cumrej_pct_prop)
plot070A0W <- ggplot(pa_rej2weekly, aes(y=rej_pct, x=request_date)) +
geom_line(lwd=1.2,color=medsl_brands[c(1)]) +
theme_minimal() +
geom_point(aes(size=returns),color=medsl_brands[c(1)],  alpha=0.7) +
labs(title="Weekly percentage of returned ballots that \nhave not been accepted for counting",x="Week",y="%",
caption = caption_date)  + guides(size=FALSE) +
theme_medsl2date + requests_x_scale + scale_y_continuous(label=comma, limits = c(0,25))
plot070A0W
setwd("plots")
ggsave(paste0("070A0W",sep="_",Sys.Date(),sep="",".png"), plot = plot070A0W, scale = 1,
width = 9, height = 6, units = c("in"), dpi = 600)
plot070A0C <- ggplot(pa_rej2weekly, aes(y=cumrej_pct, x=request_date)) +
geom_line(lwd=1.2,color=medsl_brands[c(1)]) +
theme_minimal() +
geom_point(aes(size=returns),color=medsl_brands[c(1)],  alpha=0.7) +
labs(title="Cumulative percentage of returned ballots that \nhave not been accepted for counting",x="Week",y="%",
caption = caption_date)  + guides(size=FALSE) +
theme_medsl2date + requests_x_scale + scale_y_continuous(label=comma, limits = c(0,25))
plot070A0C
ggsave(paste0("070A0C",sep="_",Sys.Date(),sep="",".png"), plot = plot070A0C, scale = 1,
width = 9, height = 6, units = c("in"), dpi = 600)
setwd("C:/Users/johna/Dropbox (Curiel Analytx)/Healthy_Elections/States/PA")
list.files()
pa_bisg <- read.csv("pa_vf_cleaned_bisg.csv")
sum(pa_bisg$pred.whi)
sum(pa_bisg$pred.whi)/nrow(pa_bisg)
sum(pa_bisg$pred.bla)/nrow(pa_bisg) # 0.7599101
1 - 0.7599101 - 0.1101364
plot070B0W <- ggplot(pa_rej2weekly_race, aes(y=weekly_rej_prop, x=request_date, color=race3)) +
geom_line(lwd=1.2) +
theme_minimal() +
geom_point(aes(size=returns), alpha=0.7) +
labs(title="Percentage distribution of this week's returns that were \nnot accepted for counting, by race",x="Week",y="%",color="Race",
caption = caption_date) +
scale_color_manual(values = medsl_brands[c(1,2,3)],drop=F) + guides(size=FALSE) +
theme_medsl2date + requests_x_scale + scale_y_continuous(label=comma, limits = c(0,100)) +
geom_hline(col=medsl_brands[1],linetype = "dashed", yintercept=(75.99), lwd=1.1) +
geom_hline(col=medsl_brands[2],linetype = "dashed", yintercept=(11.01), lwd=1.1) +
geom_hline(col=medsl_brands[3],linetype = "dashed", yintercept=(12.99535), lwd=1.1)
plot070B0W
plot070B0W <- ggplot(pa_rej2weekly_race, aes(y=weekly_rej_prop, x=request_date, color=race3)) +
geom_line(lwd=1.2) +
theme_minimal() +
geom_point(aes(size=returns), alpha=0.7) +
labs(title="Percentage distribution of this week's returns that were \nnot accepted for counting, by race",x="Week",y="%",color="Race",
caption = caption_date) +
scale_color_manual(values = medsl_brands[c(1,2,3)],drop=F) + guides(size=FALSE) +
theme_medsl2date + requests_x_scale + scale_y_continuous(label=comma, limits = c(0,100)) +
geom_hline(col=medsl_brands[3],linetype = "dashed", yintercept=(75.99), lwd=1.1) +
geom_hline(col=medsl_brands[2],linetype = "dashed", yintercept=(11.01), lwd=1.1) +
geom_hline(col=medsl_brands[1],linetype = "dashed", yintercept=(12.99535), lwd=1.1)
plot070B0W
pa_rej2weekly_race$race3 <- str_to_title(pa_rej2weekly_race$race3)
plot070B0W <- ggplot(pa_rej2weekly_race, aes(y=weekly_rej_prop, x=request_date, color=race3)) +
geom_line(lwd=1.2) +
theme_minimal() +
geom_point(aes(size=returns), alpha=0.7) +
labs(title="Percentage distribution of this week's returns that were \nnot accepted for counting, by race",x="Week",y="%",color="Race",
caption = caption_date) +
scale_color_manual(values = medsl_brands[c(1,2,3)],drop=F) + guides(size=FALSE) +
theme_medsl2date + requests_x_scale + scale_y_continuous(label=comma, limits = c(0,100)) +
geom_hline(col=medsl_brands[3],linetype = "dashed", yintercept=(75.99), lwd=1.1) +
geom_hline(col=medsl_brands[2],linetype = "dashed", yintercept=(11.01), lwd=1.1) +
geom_hline(col=medsl_brands[1],linetype = "dashed", yintercept=(12.99535), lwd=1.1)
plot070B0W
setwd(wd_abs_pa)
setwd("plots")
ggsave(paste0("070B0W",sep="_",Sys.Date(),sep="",".png"), plot = plot070B0W, scale = 1,
width = 9, height = 6, units = c("in"), dpi = 600)
names(pa_rej2weekly_race)
plot070B0C <- ggplot(pa_rej2weekly_race, aes(y=cumrej_pct_prop, x=request_date, color=race3)) +
geom_line(lwd=1.2) +
theme_minimal() +
geom_point(aes(size=returns), alpha=0.7) +
labs(title="Percentage distribution of cumulative returns that were \nnot accepted for counting, by race",x="Week",y="%",color="Race",
caption = caption_date) +
scale_color_manual(values = medsl_brands[c(1,2,3)],drop=F) + guides(size=FALSE) +
theme_medsl2date + requests_x_scale + scale_y_continuous(label=comma, limits = c(0,100)) +
geom_hline(col=medsl_brands[3],linetype = "dashed", yintercept=(75.99), lwd=1.1) +
geom_hline(col=medsl_brands[2],linetype = "dashed", yintercept=(11.01), lwd=1.1) +
geom_hline(col=medsl_brands[1],linetype = "dashed", yintercept=(12.99535), lwd=1.1)
plot070B0W
plot070B0C
setwd(wd_abs_pa)
setwd("plots")
ggsave(paste0("070B0C",sep="_",Sys.Date(),sep="",".png"), plot = plot070B0C, scale = 1,
width = 9, height = 6, units = c("in"), dpi = 600)
setwd(data_dir_path)
saveRDS(pa_rej2weekly_race,paste0("final_race_rej",sep="_",Sys.Date(),sep=".","rds"))
saveRDS(pa_rej2weekly,paste0("final_aggregated_rej",sep="_",Sys.Date(),sep=".","rds"))
plot070B0W <- ggplot(pa_rej2weekly_race, aes(y=weekly_rej_prop, x=request_date, color=race3)) +
geom_line(lwd=1.2) +
theme_minimal() +
geom_point(aes(size=returns), alpha=0.7) +
labs(title="Percentage distribution of this week's returns that were \nnot accepted for counting, by race",x="Week",y="%",color="Race",
caption =  paste0("Note: Dashed lines reflect proportion of registered voters",sep="\n", caption_date)) +
scale_color_manual(values = medsl_brands[c(1,2,3)],drop=F) + guides(size=FALSE) +
theme_medsl2date + requests_x_scale + scale_y_continuous(label=comma, limits = c(0,100)) +
geom_hline(col=medsl_brands[3],linetype = "dashed", yintercept=(75.99), lwd=1.1) +
geom_hline(col=medsl_brands[2],linetype = "dashed", yintercept=(11.01), lwd=1.1) +
geom_hline(col=medsl_brands[1],linetype = "dashed", yintercept=(12.99535), lwd=1.1)
plot070B0W
setwd(wd_abs_pa)
setwd("plots")
ggsave(paste0("070B0W",sep="_",Sys.Date(),sep="",".png"), plot = plot070B0W, scale = 1,
width = 9, height = 6, units = c("in"), dpi = 600)
plot070B0C <- ggplot(pa_rej2weekly_race, aes(y=cumrej_pct_prop, x=request_date, color=race3)) +
geom_line(lwd=1.2) +
theme_minimal() +
geom_point(aes(size=returns), alpha=0.7) +
labs(title="Percentage distribution of cumulative returns that were \nnot accepted for counting, by race",x="Week",y="%",color="Race",
caption =  paste0("Note: Dashed lines reflect proportion of registered voters",sep="\n", caption_date)) +
scale_color_manual(values = medsl_brands[c(1,2,3)],drop=F) + guides(size=FALSE) +
theme_medsl2date + requests_x_scale + scale_y_continuous(label=comma, limits = c(0,100)) +
geom_hline(col=medsl_brands[3],linetype = "dashed", yintercept=(75.99), lwd=1.1) +
geom_hline(col=medsl_brands[2],linetype = "dashed", yintercept=(11.01), lwd=1.1) +
geom_hline(col=medsl_brands[1],linetype = "dashed", yintercept=(12.99535), lwd=1.1)
plot070B0C
setwd(wd_abs_pa)
setwd("plots")
ggsave(paste0("070B0C",sep="_",Sys.Date(),sep="",".png"), plot = plot070B0C, scale = 1,
width = 9, height = 6, units = c("in"), dpi = 600)
230206 /2400000
names(pa_rej2weekly)
names(pa_rej2weekly_race)
summary(pa_rej2weekly_race$weekly_rej_prop)
knitr::opts_chunk$set(echo = TRUE, dev="cairo_pdf")
knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_knit$set(root.dir = '')
# SourceSansPro is font that worked
library(foreign)
library(stringi)
library(stringr)
options(stringsAsFactors = FALSE)
getwd()
#rstudioapi::isAvailable()
###working directory
#wd_abs_nc <- getwd()
#wd_abs_nc  <- dirname(rstudioapi::getActiveDocumentContext()$path)
wd_pa_results <- paste0("data",sep="/","results",sep="",Sys.Date())
print(wd_pa_results)
#wd_nc_results <- paste0("/data",sep="/","results",sep="",Sys.Date())
#wd_abs_nc_plots <- paste0(wd_abs_nc,sep="/","plots")
options(stringsAsFactors = FALSE)
#paste0(wd_nc_results,sep="/","final_aggregated_df",sep="_",Sys.Date(),sep=".","rds")
pa_requests_all2 <- readRDS(paste0(wd_pa_results,sep="/","final_aggregated_df",sep="_",Sys.Date(),sep=".","rds") )
pa_requests_all2$request_date <- as.Date(pa_requests_all2$request_date)
###read in rejected data
pa_rej2weekly_race <- readRDS(paste0("final_race_rej",sep="_",Sys.Date(),sep=".","rds"))
data_dir_path
knitr::opts_chunk$set(echo = TRUE, dev="cairo_pdf")
knitr::opts_chunk$set(echo = TRUE)
#knitr::opts_knit$set(root.dir = '')
# SourceSansPro is font that worked
library(foreign)
library(stringi)
library(stringr)
options(stringsAsFactors = FALSE)
getwd()
#rstudioapi::isAvailable()
###working directory
#wd_abs_nc <- getwd()
#wd_abs_nc  <- dirname(rstudioapi::getActiveDocumentContext()$path)
wd_pa_results <- paste0("data",sep="/","results",sep="",Sys.Date())
print(wd_pa_results)
#wd_nc_results <- paste0("/data",sep="/","results",sep="",Sys.Date())
#wd_abs_nc_plots <- paste0(wd_abs_nc,sep="/","plots")
options(stringsAsFactors = FALSE)
#paste0(wd_nc_results,sep="/","final_aggregated_df",sep="_",Sys.Date(),sep=".","rds")
pa_requests_all2 <- readRDS(paste0(wd_pa_results,sep="/","final_aggregated_df",sep="_",Sys.Date(),sep=".","rds") )
pa_requests_all2$request_date <- as.Date(pa_requests_all2$request_date)
###read in rejected data
pa_rej2weekly_race <- readRDS(paste0(wd_pa_results,sep="/", "final_race_rej",sep="_",Sys.Date(),sep=".","rds"))
pa_rej2weekly <- readRDS(paste0(wd_pa_results, sep="/", "final_aggregated_rej",sep="_",Sys.Date(),sep=".","rds"))
##UPDATE WITH THE MOST RECENT WEEK OF DATA
week_of <- str_remove(format(pa_requests_all2$request_date[nrow(pa_requests_all2)],"%B %d"),"0") #will get the date from the last observation
##results_date should usually be today's date; however, if you need to
###regenerate the report using an old set of results, change this param
results_date <- Sys.Date()
date_of_pub <- format(Sys.Date(),"%B %d, %Y" )
View(pa_rej2weekly)
679/3899
12*60
720+48
.06/(791-3.6)
setwd("F:/MEDSL/user_requests")
options(stringsAsFactors = F)
prez <- read.csv("countypres_2000-2016c.csv")
presz2016 <- subset(prez, year==2016 )
View(presz2016)
va_prez <- subset(prez2016, state_po=="VA")
presz2016 <- subset(prez, year==2016 )
va_prez <- subset(prez2016, state_po=="VA")
va_prez <- subset(presz2016, state_po=="VA")
View(va_prez)
library(dplyr)
library(foreign)
ga_wd <- "F:/voterfile/ga"
setwd(ga_wd)
list.files()
ga_voterfile <- read.csv("ga_voterfile.csv")
ga_voterfile$res_zip <- substr(ga_voterfile$residence_zipcode,1,5)
ga_voterfile$full_addr<- paste0(ga_voterfile$residence_house_number, sep=" ", ga_voterfile$residence_street_name, sep=" ",
ga_voterfile$residence_city,  sep=", ", "GA", sep=" ", ga_voterfile$res_zip )
library(stringi)
library(stringr)
ga_voterfile$full_addr <- str_to_upper(ga_voterfile$full_addr)
ga_addrs <- ga_voterfile[!duplicated(ga_voterfile$full_addr), ]
names(ga_addrs)
ga_addrs <- subset(ga_addrs, select=c(full_addr,county_code ))
write.dbf(ga_addrs, "ga_voterfile_unique_addrs.dbf")
#####################################################################3
############### Early Vote PlotR for NC #################################
##########################################################################
###pkgs
library(dplyr)
library(sp)
library(rgdal)
library(foreign)
library(ggplot2)
library(zoo)
library(tidyverse)
library(maps)
library(lubridate)
library(extrafont)
library(scales)
options(stringsAsFactors = FALSE)
####
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
library(extrafont)#these allow you to read in the non-default fonts
library(showtext)
font_import("F:/MEDSL/blogs/styrene_b")  #specify font path here
###these are the format objects
###creating theme_medsl2
theme_medsl2date <- theme(axis.text.x = element_text(angle = 45,vjust=0.5), title = element_text(size = rel(1.2), family="Styrene B"),
plot.caption = element_text(hjust=0),panel.grid.minor = element_blank())
###there are 14 breaks on the x axis. we will want to make it so that they are the same.
requests_x_scale <- scale_x_date(breaks = c(as.Date("2020-08-02"),as.Date("2020-08-09"),as.Date("2020-08-16"),
as.Date("2020-08-23"),
as.Date("2020-08-30"),as.Date("2020-09-06"),as.Date("2020-09-13"),as.Date("2020-09-20"),
as.Date("2020-09-27"),as.Date("2020-10-04"),as.Date("2020-10-11"), as.Date("2020-10-18"),
as.Date("2020-10-25"),
as.Date("2020-11-02")), limits = as.Date(c('2020-08-02','2020-11-09')),
labels=c("Aug-02 \n& before", "Aug-09", "Aug-16","Aug-23","Aug-30","Sep-06","Sep-13","Sep-20",
"Sep-27","Oct-04", "Oct-11", "Oct-18","Oct-25","Nov-01"))
###medsl colors
medsl_brands <- c("#3791FF","#59CBF5","#C0BA79","#F6573E","#156DD0","#C72654","#FF6878")
medsl_purple <- c("#DDDBFB", "#B1AAFB","#7D76C7","#635E99",  "#4E4A81")
###create auto caption
caption_date <- paste0("Data source: North Carolina Board of Election \nGraph Source: MIT Elections Data and Science Lab\nGraph date:",
sep=" ", format(Sys.Date(),format="%m/%d/%Y"))
###function to create week dates from nums
first_date_of_week <- function(year, week){
strptime(paste(year, week-1, 7), format = "%Y %W %u")
}
first_date_of_weekjan1 <- function(year, week){
strptime(paste(year, week-1, 3), format = "%Y %W %u")
}
# 4,855,693	1,557,891	58,287	0	620,976	197,123	3,163,240	3,729,496	7,092,847
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
############################################
# "F:/MEDSL/absentee_returns/NC"
wd_abs_nc  <- dirname(rstudioapi::getActiveDocumentContext()$path) # automatically sets directory to where file is saved
setwd(wd_abs_nc)
###abs ballot requests
setwd("ballot_requests")
nc_requests <- list.files()
###
####read in the requests file based on the most recent version
temp_reqs <- read.csv(nc_requests[length(nc_requests)-1])
###create party var
temp_reqs$party2 <- temp_reqs$party_desc
temp_reqs$party2[temp_reqs$party_desc!="DEMOCRATIC" & temp_reqs$party_desc!="REPUBLICAN"] <- "OTHER"
###create race var
temp_reqs$race2 <- temp_reqs$race_desc
temp_reqs$race2[temp_reqs$race_desc=="TWO or MORE RACES" | temp_reqs$race_desc=="UNDESIGNATED" | temp_reqs$race_desc=="OTHER"] <- "OTHER"
temp_reqs$race2[temp_reqs$race_desc=="TWO or MORE RACES" | temp_reqs$race_desc=="UNDESIGNATED" | temp_reqs$race_desc=="OTHER"] <- "OTHER"
temp_reqs$race2[temp_reqs$ethncity_desc=="HISPANIC or LATINO"] <- "HISPANIC or LATINO"
temp_reqs$race2[temp_reqs$race2=="INDIAN AMERICAN or ALASKA NATIVE"] <- "INDIAN AMERICAN"
temp_reqs$race2[temp_reqs$race2=="BLACK or AFRICAN AMERICAN"] <- "BLACK"
###get the date from the week num
temp_reqs$request_week_num2 <- temp_reqs$request_week_num
temp_reqs$request_week_num2[temp_reqs$request_week_num2 < 32] <- 32 # setting date to be "Before X" if before the 32nd week
####note: It seems that the requested per week is from today.
#temp_reqs$request_week_num2 <- temp_reqs$request_week_num2 -1 ; old code
###getting rid of what appear to be a couple hundred typos, with requests from outside of 2020
temp_reqs <- subset(temp_reqs, request_year==2020)
temp_reqs <- subset(temp_reqs, request_week_num2 < max(temp_reqs$request_week_num2))
sort(unique(temp_reqs$request_week_num2))
###now we will set the max on week behind
#temp_reqs$request_week_num2[temp_reqs$request_week_num2==max(temp_reqs$request_week_num2)] <- max(temp_reqs$request_week_num2) - 1
#temp_reqs$date1 <- first_date_of_week(2020,temp_reqs$request_week_num)
temp_reqs$date2 <- first_date_of_week(2020,temp_reqs$request_week_num2)
temp_reqs$date2  <- substr(temp_reqs$date2,1,10)
temp_reqs$date2 <- as.Date(temp_reqs$date2)
temp_reqs$date_num <- as.numeric(temp_reqs$date2)
sort(unique(temp_reqs$request_week_num2))
sort(unique(temp_reqs$date2))
##subsettign based on cutoff date
cutoffdate <- as.numeric(as.Date(Sys.Date()))
temp_reqs <- subset(temp_reqs, date_num <= cutoffdate )
##simplifying race var further
temp_reqs$race3 <- temp_reqs$race2
temp_reqs$race3[temp_reqs$race3!="WHITE" & temp_reqs$race3 != "BLACK"] <- "OTHER"
###so basically for request week num, we want to figure out the week in Aug of interest, then convert num to date, first mon of that week
#on x-axis
####getting the data by race and party
party_df <- temp_reqs %>% group_by(party2,request_week_num2,date2) %>% summarise(total_reqs = sum(group_count,na.rm=T))
race_df <- temp_reqs %>% group_by(race3,request_week_num2,date2) %>% summarise(total_reqs = sum(group_count,na.rm=T))
###now create the cumulative requests
party_df <- party_df %>% group_by(party2) %>% mutate(cum_reqs=cumsum(total_reqs))
race_df <- race_df %>% group_by(race3) %>% mutate(cum_reqs=cumsum(total_reqs))
###### The total requests plot
total_requests <- sum(race_df$total_reqs)
total_requests
all_df_reqs <- race_df %>% group_by(date2) %>% summarise(total_reqs=sum(total_reqs))
summary(all_df_reqs$total_reqs)
any(colnames(wi_data4)=="pred.whi")
if(any(colnames(wi_data4)=="pred.whi")==T){
print("Present")
}else{
print("Not present")
}
if(any(colnames(wi_data4)=="pred.whi2")==T){
print("Present")
}else{
print("Not present")
}
?stop
predNames <- c("pred.whi","pred.bla","pred.his","pred.asi","pred.oth")
which(colnames(wi_data4)==predNames)
colnamus1 <- which(colnames(wi_data4)==predNames)
sum(wi_data4[,colnamus1])
rowSums(wi_data4[,colnamus1])
race_herfindahl_scores <- function(dataframe1){
if((any(colnames(wi_data4)=="pred.whi")==FALSE){
stop("Predicted race variable not present.")
}
predNames <- c("pred.whi","pred.bla","pred.his","pred.asi","pred.oth")
pred_col_nums <- which(colnames(wi_data4)==predNames)
dataframe1$herf_weight <- (dataframe1[,predNames[1] ]^2)+(dataframe1[,predNames[2] ]^2)+(dataframe1[,predNames[3] ]^2)+
(dataframe1[,predNames[4] ]^2) +(dataframe1[,predNames[5] ]^2)
##### now onto get plurality race
prob_matrix <- as.matrix(dataframe1[,pred_col_nums])
prob_matrix2 <- apply(prob_matrix,1,max)
dataframe1 <- cbind(dataframe1,prob_matrix2)
colnames(dataframe1)[colnames(dataframe1)=="prob_matrix2"] <- "max_race_prob"
###assign race
dataframe1$plural_race[dataframe1$pred.whi==dataframe1$max_race_prob] <- "white"
dataframe1$plural_race[dataframe1$pred.bla==dataframe1$max_race_prob] <- "black"
dataframe1$plural_race[dataframe1$pred.his==dataframe1$max_race_prob] <- "hispanic"
dataframe1$plural_race[dataframe1$pred.asi==dataframe1$max_race_prob] <- "asian"
dataframe1$plural_race[dataframe1$pred.oth==dataframe1$max_race_prob] <- "other"
}
race_herfindahl_scores <- function(dataframe1){
if(any(colnames(wi_data4)=="pred.whi")==FALSE){
stop("Predicted race variable not present.")
}
predNames <- c("pred.whi","pred.bla","pred.his","pred.asi","pred.oth")
pred_col_nums <- which(colnames(wi_data4)==predNames)
dataframe1$herf_weight <- (dataframe1[,predNames[1] ]^2)+(dataframe1[,predNames[2] ]^2)+(dataframe1[,predNames[3] ]^2)+
(dataframe1[,predNames[4] ]^2) +(dataframe1[,predNames[5] ]^2)
##### now onto get plurality race
prob_matrix <- as.matrix(dataframe1[,pred_col_nums])
prob_matrix2 <- apply(prob_matrix,1,max)
dataframe1 <- cbind(dataframe1,prob_matrix2)
colnames(dataframe1)[colnames(dataframe1)=="prob_matrix2"] <- "max_race_prob"
###assign race
dataframe1$plural_race[dataframe1$pred.whi==dataframe1$max_race_prob] <- "white"
dataframe1$plural_race[dataframe1$pred.bla==dataframe1$max_race_prob] <- "black"
dataframe1$plural_race[dataframe1$pred.his==dataframe1$max_race_prob] <- "hispanic"
dataframe1$plural_race[dataframe1$pred.asi==dataframe1$max_race_prob] <- "asian"
dataframe1$plural_race[dataframe1$pred.oth==dataframe1$max_race_prob] <- "other"
}
wi_data4<- race_herfindahl_scores(wi_data4)
View(wi_data4)
wi_data <- zipWRUext2::wi_data
wi_abs_data2 <- zip_wru2(wi_abs_data, state="WISCONSIN", type1="acs", year1="2018", zip_col="zipcode2", surname_field = "lastname")
library(zipWRUext2)
wi_data <- zipWRUext2::wi_data
wi_data4 <- zip_wru(wi_data, state="WISCONSIN", type1="census", year1="2010", zip_col="zcta5", surname_field = "lastname")
wi_data4<- race_herfindahl_scores(wi_data4)
wi_data4 <- zip_wru(wi_data, state="WISCONSIN", type1="census", year1="2010", zip_col="zcta5", surname_field = "lastname")
race_herfindahl_scores <- function(dataframe1){
if(any(colnames(wi_data4)=="pred.whi")==FALSE){
stop("Predicted race variable not present.")
}
predNames <- c("pred.whi","pred.bla","pred.his","pred.asi","pred.oth")
pred_col_nums <- which(colnames(wi_data4)==predNames)
dataframe1$herf_weight <- (dataframe1[,predNames[1] ]^2)+(dataframe1[,predNames[2] ]^2)+(dataframe1[,predNames[3] ]^2)+
(dataframe1[,predNames[4] ]^2) +(dataframe1[,predNames[5] ]^2)
##### now onto get plurality race
prob_matrix <- as.matrix(dataframe1[,pred_col_nums])
prob_matrix2 <- apply(prob_matrix,1,max)
dataframe1 <- cbind(dataframe1,prob_matrix2)
colnames(dataframe1)[colnames(dataframe1)=="prob_matrix2"] <- "max_race_prob"
###assign race
dataframe1$plural_race[dataframe1$pred.whi==dataframe1$max_race_prob] <- "white"
dataframe1$plural_race[dataframe1$pred.bla==dataframe1$max_race_prob] <- "black"
dataframe1$plural_race[dataframe1$pred.his==dataframe1$max_race_prob] <- "hispanic"
dataframe1$plural_race[dataframe1$pred.asi==dataframe1$max_race_prob] <- "asian"
dataframe1$plural_race[dataframe1$pred.oth==dataframe1$max_race_prob] <- "other"
return(dataframe1)
}
wi_data4 <- zip_wru(wi_data, state="WISCONSIN", type1="census", year1="2010", zip_col="zcta5", surname_field = "lastname")
wi_data4<- race_herfindahl_scores(wi_data4)
View(wi_data4)
head(wi_data4[,20:28])
head(wi_data4[,26:28])
wi_data <- zipWRUext2::wi_data
wi_data4 <- zip_wru(wi_data, state="WISCONSIN", type1="census", year1="2010", zip_col="zcta5", surname_field = "lastname")
wi_data4<- race_herfindahl_scores(wi_data4)
head(wi_data4[,26:28])
library("devtools")
library("roxygen2")
parentDirectory <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(parentDirectory)
setwd("zipWRUext2")
document()
