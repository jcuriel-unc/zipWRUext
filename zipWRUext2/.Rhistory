}else{
final_dataframe <- rbind(final_dataframe,dataframe2)
}
}
#start_col <- ncol(final_dataframe)-5
#final_dataframe <- final_dataframe[,c(1:ncol(dataframe1),start_col:ncol(final_dataframe) )]
},error=function(e){cat("ERROR :",conditionMessage(e), "\n")} )
return(final_dataframe)
}
wi_data4 <- zip_wru2(wi_data, state="WISCONSIN", type1="census", year1="2010", zip_col="zcta5", surname_field = "lastname")
zipWRUext2::zip_all_census2
zip_wru2 <- function(dataframe1, state, type1="census", year1="2010", zip_col="zcta5", surname_field = "surname"){
list.of.packages <- c("wru","gtools")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
eth <- c("whi", "bla", "his", "asi", "oth")
final_dataframe <- data.frame(stringsAsFactors = FALSE)
#data("zip_all_census2", envir=environment())
all_zip_census2 <- zipWRUext2::zip_all_census2
#all_zip_census <- readRDS(paste0("data/cleaned",sep="/","master_zcta_bisg_data.rds"))
all_zip_census2 <- subset(all_zip_census2,state_name==state & type==type1 & year==year1 )
###get zip code field
zip_num <- which(colnames(dataframe1)==zip_col)
colnames(dataframe1)[zip_num] <- "zcta5"
zip_vec <- dataframe1[,zip_num]
zip_vec <- sort(unique(zip_vec))
###get surname field
surname_num <- which(colnames(dataframe1)==surname_field)
colnames(dataframe1)[surname_num] <- "surname"
surnames2010 <- wru::surnames2010
####now getting the loop running
tryCatch({
for(i in 1:length(zip_vec)){
print(zip_vec[i])
#print(i)
dataframe2 <- subset(dataframe1, zcta5==zip_vec[i])
###could probably do something here if failure to merge
###try catch here
tryCatch({
dataframe2 <-wru::merge_surnames(dataframe2)
},error=function(e){cat("ERROR :",conditionMessage(e), "\n")} )
if(is.null(dataframe2$p_whi)){
dataframe2$p_whi <- 0.6665
dataframe2$p_bla <- 0.0853
dataframe2$p_his <- 0.1367
dataframe2$p_asi <- 0.0797
dataframe2$p_oth <- 0.0318
}
dataframe2 <- merge(dataframe2,all_zip_census2,BY="zcta5" )
###now getting the pred fields
for (k in 1:length(eth)) {
dataframe2[paste("u", eth[k], sep = "_")] <- dataframe2[paste("p",
eth[k], sep = "_")] * dataframe2[paste("r", eth[k],
sep = "_")]
}
dataframe2$u_tot <- apply(dataframe2[paste("u", eth,
sep = "_")], 1, sum, na.rm = T)
for (k in 1:length(eth)) {
dataframe2[paste("q", eth[k], sep = "_")] <- dataframe2[paste("u",
eth[k], sep = "_")]/dataframe2$u_tot
}
for (k in 1:length(eth)) {
dataframe2[paste("pred", eth[k], sep = ".")] <- dataframe2[paste("q",
eth[k], sep = "_")]
}
start_col <- ncol(final_dataframe)-5
dataframe2 <- dataframe2[,c(1:ncol(dataframe1),start_col:ncol(dataframe2))]
if(is.null(final_dataframe)){
final_dataframe <- dataframe2
}else{
final_dataframe <- rbind(final_dataframe,dataframe2)
}
}
#start_col <- ncol(final_dataframe)-5
#final_dataframe <- final_dataframe[,c(1:ncol(dataframe1),start_col:ncol(final_dataframe) )]
},error=function(e){cat("ERROR :",conditionMessage(e), "\n")} )
return(final_dataframe)
}
wi_data4 <- zip_wru2(wi_data, state="WISCONSIN", type1="census", year1="2010", zip_col="zcta5", surname_field = "lastname")
devtools::install_github("https://github.com/jcuriel-unc/zipWRUext", subdir="zipWRUext2")
library(zipWRUext2)
wi_data <- zipWRUext2::wi_data
wi_data4 <- zip_wru2(wi_data, state="WISCONSIN", type1="census", year1="2010", zip_col="zcta5", surname_field = "lastname")
wi_data4 <- zip_wru(wi_data, state="WISCONSIN", type1="census", year1="2010", zip_col="zcta5", surname_field = "lastname")
library(wru)
wi_data4 <- zip_wru(wi_data, state="WISCONSIN", type1="census", year1="2010", zip_col="zcta5", surname_field = "lastname")
names(wi_data)
library(foreign)
library(dplyr)
library(tidyverse)
options(stringsAsFactors = F)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
wd_path <- dirname(rstudioapi::getActiveDocumentContext()$path)
potus_states <- read.csv("1976-2020-president.csv")
potus_county <- read.csv("countypres_2000-2016.csv")
head(potus_states)
head(potus_county)
potus_states <- subset(potus_states, year >= 2000)
sort(unique(potus_states$candidate))
potus_county$candidate <- str_to_upper(potus_county$candidate)
potus_county$lastname <- sapply(strsplit(potus_county$candidate, " "), tail, 1)
potus_county$party <- str_to_upper(potus_county$party)
potus_county$state <- str_to_upper(potus_county$state)
potus_county_col <- potus_county %>% group_by(candidate,party,year,state,lastname) %>% summarise(candidatevotes=sum(candidatevotes,na.rm=T))
potus_county_col <- as.data.frame(potus_county_col)
potus_states$lastname <- NA
last_names <- sort(unique(potus_county$lastname))
for(i in 1:length(unique(potus_county$lastname))){
potus_states$lastname[str_detect(potus_states$candidate, last_names[i] )] <- last_names[i]
}
potus_states2 <- potus_states %>% group_by(lastname, year,state, party_simplified) %>% summarise(candidatevotes=sum(candidatevotes,na.rm=T))
potus_states2 <- as.data.frame(potus_states2)
potus_county_col2 <- merge(potus_county_col, potus_states2, by=c("state", "lastname", "year"))
potus_county_col2$vote_diff <- potus_county_col2$candidatevotes.x - potus_county_col2$candidatevotes.y
bad_data <- subset(potus_county_col2, vote_diff != 0)
View(bad_data)
library(tidyverse)
library(maptools)
library(mapproj)
library(ggthemes)
library(rgdal)
library(rgeos)
library(ggplot2)
library(broom)
library(gridExtra)
library(readxl)
library(choroplethr)
library(choroplethrMaps)
library(plotly)
library(ggpubr)
library(sp)
library(dplyr)
library(stringi)
library(stringr)
####
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
library(extrafontdb)#these allow you to read in the non-default fonts
library(extrafont)
medsl_brands = c("#3791FF","#59CBF5","#C0BA79","#F6573E","#156DD0","#C72654","#FF6878")
caption_date <- paste0("Data source: Wisconsin Election Commission
\nGraph source: MIT Elections Data and Science Lab\nGraph date:",sep=" ",
format(Sys.Date(),format="%m/%d/%Y"))
#### function for shadow text
shadowtext <- function(x, y=NULL, labels, col='white', bg='black',
theta= seq(pi/4, 2*pi, length.out=8), r=0.1, ... ) {
xy <- xy.coords(x,y)
xo <- r*strwidth('x')
yo <- r*strheight('x')
for (i in theta) {
text( xy$x + cos(i)*xo, xy$y + sin(i)*yo, labels, col=bg, ... )
}
text(xy$x, xy$y, labels, col=col, ... )
}
################################################
##### cd set up
main_wd <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(main_wd)
list.files()
mail <- read.csv("mail_fig1update2020.csv")
mail$percent1 <- mail$percent*100
colnames(mail)[1] <- "year"
p <- ggplot(mail, aes(x = year)) +
geom_line(aes(y = percent1, color = type), size=1) + geom_point(aes(y = percent1, color = type)) +
labs(title="Ballots cast by modes of voting over time",
subtitle="",
caption = "Source: Voting and Registration Supplement of the Current Population Survey \n https://www.census.gov/topics/public-sector/voting.html",
y="Electorate %", x = "Year")
p <- p + scale_color_manual(name="", labels = c("Early, in person", "Election Day", "Mail/absentee"),
values = c("Early" = "#FF8318", "Election Day"="#948DE5", "Mail"="#37C256"))
p <- p + scale_y_continuous(breaks = c(0, 15, 30, 45, 60, 75, 90), labels = function(x){ paste0(x, "%") }) +
scale_x_continuous(breaks = c(1992, 1996, 2000, 2004, 2008, 2012, 2016, 2020)) + theme_minimal()
p
par(family="Styrene B")
library(extrafontdb)#these allow you to read in the non-default fonts
library(extrafont)
library(showtext)
library(ggplot2)
font_import("styrene_b_ttf")
if(("Styrene B" %in% windowsFonts())==TRUE){
print("Styrene B registered; proceed")
}else{
stop("Not registered.")
}
ggplot(trees, aes(1:length(Volume), Volume)) +
ggtitle("Custom fonts in ggplot2") +
geom_point(col = 4) +
xlab("") +
theme(text = element_text(family = "Styrene B"))
plot(trees$Volume,
main = "Custom fonts in R base",
xlab = "",
ylab = "Volume",
pch = 21, col = 4, bg = 4,
family = "Wingdings")
p <- ggplot(mail, aes(x = year)) +
geom_line(aes(y = percent1, color = type), size=1) + geom_point(aes(y = percent1, color = type)) +
labs(title="Ballots cast by modes of voting over time",
subtitle="",
caption = "Source: Voting and Registration Supplement of the Current Population Survey \n https://www.census.gov/topics/public-sector/voting.html",
y="Electorate %", x = "Year")
p <- p + scale_color_manual(name="", labels = c("Early, in person", "Election Day", "Mail/absentee"),
values = c("Early" = "#FF8318", "Election Day"="#948DE5", "Mail"="#37C256")) +
theme(text = element_text(family = "Styrene B"))
p <- p + scale_y_continuous(breaks = c(0, 15, 30, 45, 60, 75, 90), labels = function(x){ paste0(x, "%") }) +
scale_x_continuous(breaks = c(1992, 1996, 2000, 2004, 2008, 2012, 2016, 2020)) + theme_minimal()
p
ggsave("mail_fig1update2020.png", plot = p, scale = 1, width = 9, height = 6, units = c("in"), dpi = 600)
p <- ggplot(mail, aes(x = year)) +
geom_line(aes(y = percent1, color = type), size=1) + geom_point(aes(y = percent1, color = type)) +
labs(title="Ballots cast by modes of voting over time",
subtitle="",
caption = "Source: Voting and Registration Supplement of the Current Population Survey (1992 - 2018) \n
Survey of teh Performance of American Elections \n
https://www.census.gov/topics/public-sector/voting.html",
y="Electorate %", x = "Year")
p <- p + scale_color_manual(name="", labels = c("Early, in person", "Election Day", "Mail/absentee"),
values = c("Early" = "#FF8318", "Election Day"="#948DE5", "Mail"="#37C256")) +
theme(text = element_text(family = "Styrene B"))
p <- p + scale_y_continuous(breaks = c(0, 15, 30, 45, 60, 75, 90), labels = function(x){ paste0(x, "%") }) +
scale_x_continuous(breaks = c(1992, 1996, 2000, 2004, 2008, 2012, 2016, 2020)) + theme_minimal()
p
p <- ggplot(mail, aes(x = year)) +
geom_line(aes(y = percent1, color = type), size=1) + geom_point(aes(y = percent1, color = type)) +
labs(title="Ballots cast by modes of voting over time",
subtitle="",
caption = paste0("Source: Voting and Registration Supplement of the Current Population Survey (1992 - 2018)", sep="\n",
"Survey of teh Performance of American Elections", sep="\n", "https://www.census.gov/topics/public-sector/voting.html"),
y="Electorate %", x = "Year")
p <- p + scale_color_manual(name="", labels = c("Early, in person", "Election Day", "Mail/absentee"),
values = c("Early" = "#FF8318", "Election Day"="#948DE5", "Mail"="#37C256")) +
theme(text = element_text(family = "Styrene B"))
p <- p + scale_y_continuous(breaks = c(0, 15, 30, 45, 60, 75, 90), labels = function(x){ paste0(x, "%") }) +
scale_x_continuous(breaks = c(1992, 1996, 2000, 2004, 2008, 2012, 2016, 2020)) + theme_minimal()
p
p <- ggplot(mail, aes(x = year)) +
geom_line(aes(y = percent1, color = type), size=1) + geom_point(aes(y = percent1, color = type)) +
labs(title="Ballots cast by modes of voting over time",
subtitle="",
caption = paste0("Source: Voting and Registration Supplement of the Current Population Survey (1992 - 2018)", sep="\n",
"Survey of teh Performance of American Elections (2020)", sep="\n", "https://www.census.gov/topics/public-sector/voting.html"),
y="Electorate %", x = "Year")
p <- p + scale_color_manual(name="", labels = c("Early, in person", "Election Day", "Mail/absentee"),
values = c("Early" = "#FF8318", "Election Day"="#948DE5", "Mail"="#37C256")) +
theme(text = element_text(family = "Styrene B"))
p <- p + scale_y_continuous(breaks = c(0, 15, 30, 45, 60, 75, 90), labels = function(x){ paste0(x, "%") }) +
scale_x_continuous(breaks = c(1992, 1996, 2000, 2004, 2008, 2012, 2016, 2020)) + theme_minimal()
p
ggsave("mail_fig1update2020.png", plot = p, scale = 1, width = 9, height = 6, units = c("in"), dpi = 600)
p <- ggplot(mail, aes(x = year)) +
geom_line(aes(y = percent1, color = type), size=1) + geom_point(aes(y = percent1, color = type)) +
labs(title="Ballots cast by modes of voting over time",
subtitle="",
caption = paste0("Source: Voting and Registration Supplement of the Current Population Survey (1992 - 2018)", sep="\n",
"Survey of the Performance of American Elections (2020)", sep="\n", "https://www.census.gov/topics/public-sector/voting.html"),
y="Electorate %", x = "Year")
p <- p + scale_color_manual(name="", labels = c("Early, in person", "Election Day", "Mail/absentee"),
values = c("Early" = "#FF8318", "Election Day"="#948DE5", "Mail"="#37C256")) +
theme(text = element_text(family = "Styrene B"))
p <- p + scale_y_continuous(breaks = c(0, 15, 30, 45, 60, 75, 90), labels = function(x){ paste0(x, "%") }) +
scale_x_continuous(breaks = c(1992, 1996, 2000, 2004, 2008, 2012, 2016, 2020)) + theme_minimal()
p
ggsave("mail_fig1update2020.png", plot = p, scale = 1, width = 9, height = 6, units = c("in"), dpi = 600)
75/5
?geom_hex
library(tidyverse)
library(maptools)
library(mapproj)
library(ggthemes)
library(rgdal)
library(rgeos)
library(ggplot2)
library(broom)
library(gridExtra)
library(readxl)
library(choroplethr)
library(choroplethrMaps)
library(plotly)
library(ggpubr)
library(sp)
library(dplyr)
library(stringi)
library(stringr)
####
substrRight <- function(x, n){
substr(x, nchar(x)-n+1, nchar(x))
}
library(extrafontdb)#these allow you to read in the non-default fonts
library(extrafont)
medsl_brands = c("#3791FF","#59CBF5","#C0BA79","#F6573E","#156DD0","#C72654","#FF6878")
caption_date <- paste0("Data source: Wisconsin Election Commission
\nGraph source: MIT Elections Data and Science Lab\nGraph date:",sep=" ",
format(Sys.Date(),format="%m/%d/%Y"))
shadowtext <- function(x, y=NULL, labels, col='white', bg='black',
theta= seq(pi/4, 2*pi, length.out=8), r=0.1, ... ) {
xy <- xy.coords(x,y)
xo <- r*strwidth('x')
yo <- r*strheight('x')
for (i in theta) {
text( xy$x + cos(i)*xo, xy$y + sin(i)*yo, labels, col=bg, ... )
}
text(xy$x, xy$y, labels, col=col, ... )
}
main_wd <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(main_wd)
hexmap <- readRDS("hexmap.Rdata")
state_codes <- read.csv("merge_on_statecodes.csv")
state_codes$state <- str_to_upper(state_codes$state)
state_codes$status <- "To be collected"
state_codes$status[state_codes$state_po=="DC"] <- "cleaned and posted"
state_codes$status[state_codes$state_po=="MT"] <- "cleaned and posted"
state_codes$status[state_codes$state_po=="NC"] <- "cleaned and posted"
state_codes$status[state_codes$state_po=="OK"] <- "cleaned and posted"
state_codes$status[state_codes$state_po=="TN"] <- "cleaned and posted"
state_codes$status[state_codes$state_po=="VA"] <- "cleaned and posted"
state_codes$status[state_codes$state_po=="WA"] <- "cleaned and posted"
state_codes$status[state_codes$state_po=="WI"] <- "cleaned and posted"
state_codes$status[state_codes$state_po=="WY"] <- "cleaned and posted"
###assign colors
state_codes$status <- "To be collected"
state_codes$status[state_codes$state_po=="AR"] <- "cleaned and posted"
state_codes$status[state_codes$state_po=="DC"] <- "cleaned and posted"
state_codes$status[state_codes$state_po=="MD"] <- "cleaned and posted"
state_codes$status[state_codes$state_po=="MT"] <- "cleaned and posted"
state_codes$status[state_codes$state_po=="NC"] <- "cleaned and posted"
state_codes$status[state_codes$state_po=="OK"] <- "cleaned and posted"
state_codes$status[state_codes$state_po=="TN"] <- "cleaned and posted"
state_codes$status[state_codes$state_po=="VA"] <- "cleaned and posted"
state_codes$status[state_codes$state_po=="WA"] <- "cleaned and posted"
state_codes$status[state_codes$state_po=="WI"] <- "cleaned and posted"
state_codes$status[state_codes$state_po=="WY"] <- "cleaned and posted"
###for collected
state_codes$status[state_codes$state_po=="AK"] <- "In progress"
state_codes$status[state_codes$state_po=="AL"] <- "In progress"
state_codes$status[state_codes$state_po=="AZ"] <- "In progress"
state_codes$status[state_codes$state_po=="CT"] <- "In progress"
state_codes$status[state_codes$state_po=="FL"] <- "In progress"
state_codes$status[state_codes$state_po=="GA"] <- "In progress"
state_codes$status[state_codes$state_po=="HI"] <- "In progress"
state_codes$status[state_codes$state_po=="IA"] <- "In progress"
state_codes$status[state_codes$state_po=="ID"] <- "In progress"
state_codes$status[state_codes$state_po=="IL"] <- "In progress"
state_codes$status[state_codes$state_po=="KS"] <- "In progress"
state_codes$status[state_codes$state_po=="KY"] <- "In progress"
state_codes$status[state_codes$state_po=="LA"] <- "In progress"
state_codes$status[state_codes$state_po=="MA"] <- "In progress"
state_codes$status[state_codes$state_po=="ME"] <- "In progress"
state_codes$status[state_codes$state_po=="MN"] <- "In progress"
state_codes$status[state_codes$state_po=="MS"] <- "In progress"
state_codes$status[state_codes$state_po=="ND"] <- "In progress"
state_codes$status[state_codes$state_po=="NE"] <- "In progress"
state_codes$status[state_codes$state_po=="NH"] <- "In progress"
state_codes$status[state_codes$state_po=="NM"] <- "In progress"
state_codes$status[state_codes$state_po=="NV"] <- "In progress"
state_codes$status[state_codes$state_po=="OH"] <- "In progress"
state_codes$status[state_codes$state_po=="OR"] <- "In progress"
state_codes$status[state_codes$state_po=="SD"] <- "In progress"
state_codes$status[state_codes$state_po=="UT"] <- "In progress"
state_codes$status[state_codes$state_po=="VT"] <- "In progress"
##merge on
hexmap2 <- merge(hexmap, state_codes, by.x="iso3166_2", by.y="state_po")
dim(hexmap2@data)
hexmap2<- spTransform(hexmap2, CRS=CRS("+init=epsg:3395")) #ignore warning.
###assign colors
hexmap2$color1 <- "lightgray"
hexmap2$color1[hexmap2$status=="In progress"] <- "EBD600"
hexmap2$color1[hexmap2$status=="cleaned and posted"] <- "37C256"
##let's try the ggplot approach
hexmap2@data = hexmap2@data %>% mutate(google_name = gsub(" \\(United States\\)", "", google_name))
hexmap2_fortified <- tidy(hexmap2, region= "google_name")
centers <- cbind.data.frame(data.frame(gCentroid(hexmap2,byid = TRUE), id=hexmap2@data$iso3166_2))
###remerge the data on
hexmap2_fortified$id <- str_to_upper(hexmap2_fortified$id)
hexmap2_fortified <- merge(hexmap2_fortified, state_codes, by.x="id",by.y="state" )
###assign colors
hexmap2_fortified$color1 <- "lightgray"
hexmap2_fortified$color1[hexmap2_fortified$status=="In progress"] <- "EBD600"
hexmap2_fortified$color1[hexmap2_fortified$status=="cleaned and posted"] <- "37C256"
hex_plot_gg <- ggplot() +
geom_polygon(data=hexmap2_fortified, aes(fill=status, x=long, y=lat, group=group),
colour="white", size=0.3, alpha=1)+
geom_text(data=centers, aes(x=x, y=y, label=id), col="white",size=7, alpha=1) +
scale_fill_manual(values =c(medsl_brands[1],medsl_brands[3],medsl_brands[6]), name="") +
theme_void() +   labs(title="Progress of 2020 precinct data",
caption = "Source: MIT Elections Data and Science Lab
\ngithub.com/MEDSL/2020-elections-official") +
theme(title = element_text(size = rel(1.2), family="Styrene B"),
legend.direction = "horizontal",legend.position = "bottom", plot.caption = element_text(hjust=0))
hex_plot_gg
ggsave("precinct_progress_map.png", plot = hex_plot_gg, scale = 1,
width = 9, height = 6, units = c("in"), dpi = 600)
###assign colors
state_codes$status <- "To be collected"
state_codes$status[state_codes$state_po=="AR"] <- "cleaned and posted"
state_codes$status[state_codes$state_po=="DC"] <- "cleaned and posted"
state_codes$status[state_codes$state_po=="MD"] <- "cleaned and posted"
state_codes$status[state_codes$state_po=="MT"] <- "cleaned and posted"
state_codes$status[state_codes$state_po=="NC"] <- "cleaned and posted"
state_codes$status[state_codes$state_po=="OK"] <- "cleaned and posted"
state_codes$status[state_codes$state_po=="TN"] <- "cleaned and posted"
state_codes$status[state_codes$state_po=="VA"] <- "cleaned and posted"
state_codes$status[state_codes$state_po=="WA"] <- "cleaned and posted"
state_codes$status[state_codes$state_po=="WI"] <- "cleaned and posted"
state_codes$status[state_codes$state_po=="WY"] <- "cleaned and posted"
###for collected
state_codes$status[state_codes$state_po=="AK"] <- "In progress"
state_codes$status[state_codes$state_po=="AL"] <- "In progress"
state_codes$status[state_codes$state_po=="AZ"] <- "In progress"
state_codes$status[state_codes$state_po=="CT"] <- "In progress"
state_codes$status[state_codes$state_po=="FL"] <- "In progress"
state_codes$status[state_codes$state_po=="GA"] <- "In progress"
state_codes$status[state_codes$state_po=="HI"] <- "In progress"
state_codes$status[state_codes$state_po=="IA"] <- "In progress"
state_codes$status[state_codes$state_po=="ID"] <- "In progress"
state_codes$status[state_codes$state_po=="IL"] <- "In progress"
state_codes$status[state_codes$state_po=="KS"] <- "In progress"
state_codes$status[state_codes$state_po=="KY"] <- "In progress"
state_codes$status[state_codes$state_po=="LA"] <- "In progress"
state_codes$status[state_codes$state_po=="MA"] <- "In progress"
state_codes$status[state_codes$state_po=="ME"] <- "In progress"
state_codes$status[state_codes$state_po=="MN"] <- "In progress"
state_codes$status[state_codes$state_po=="MS"] <- "In progress"
state_codes$status[state_codes$state_po=="ND"] <- "In progress"
state_codes$status[state_codes$state_po=="NE"] <- "In progress"
state_codes$status[state_codes$state_po=="NH"] <- "In progress"
state_codes$status[state_codes$state_po=="NM"] <- "In progress"
state_codes$status[state_codes$state_po=="NV"] <- "In progress"
state_codes$status[state_codes$state_po=="OH"] <- "In progress"
state_codes$status[state_codes$state_po=="OR"] <- "In progress"
state_codes$status[state_codes$state_po=="SC"] <- "In progress"
state_codes$status[state_codes$state_po=="SD"] <- "In progress"
state_codes$status[state_codes$state_po=="UT"] <- "In progress"
state_codes$status[state_codes$state_po=="VT"] <- "In progress"
##merge on
hexmap2 <- merge(hexmap, state_codes, by.x="iso3166_2", by.y="state_po")
dim(hexmap2@data)
hexmap2<- spTransform(hexmap2, CRS=CRS("+init=epsg:3395")) #ignore warning.
###assign colors
hexmap2$color1 <- "lightgray"
hexmap2$color1[hexmap2$status=="In progress"] <- "EBD600"
hexmap2$color1[hexmap2$status=="cleaned and posted"] <- "37C256"
##let's try the ggplot approach
hexmap2@data = hexmap2@data %>% mutate(google_name = gsub(" \\(United States\\)", "", google_name))
hexmap2_fortified <- tidy(hexmap2, region= "google_name")
centers <- cbind.data.frame(data.frame(gCentroid(hexmap2,byid = TRUE), id=hexmap2@data$iso3166_2))
###remerge the data on
hexmap2_fortified$id <- str_to_upper(hexmap2_fortified$id)
hexmap2_fortified <- merge(hexmap2_fortified, state_codes, by.x="id",by.y="state" )
###assign colors
hexmap2_fortified$color1 <- "lightgray"
hexmap2_fortified$color1[hexmap2_fortified$status=="In progress"] <- "EBD600"
hexmap2_fortified$color1[hexmap2_fortified$status=="cleaned and posted"] <- "37C256"
hex_plot_gg <- ggplot() +
geom_polygon(data=hexmap2_fortified, aes(fill=status, x=long, y=lat, group=group),
colour="white", size=0.3, alpha=1)+
geom_text(data=centers, aes(x=x, y=y, label=id), col="white",size=7, alpha=1) +
scale_fill_manual(values =c(medsl_brands[1],medsl_brands[3],medsl_brands[6]), name="") +
theme_void() +   labs(title="Progress of 2020 precinct data",
caption = "Source: MIT Elections Data and Science Lab\ngithub.com/MEDSL/2020-elections-official") +
theme(title = element_text(size = rel(1.2), family="Styrene B"),
legend.direction = "horizontal",legend.position = "bottom", plot.caption = element_text(hjust=0))
hex_plot_gg
ggsave("precinct_progress_map.png", plot = hex_plot_gg, scale = 1,
width = 9, height = 6, units = c("in"), dpi = 600)
ggsave(paste0("precinct_progress_map.png",sep="_", Sys.Date()), plot = hex_plot_gg, scale = 1,
width = 9, height = 6, units = c("in"), dpi = 600)
ggsave(paste0("precinct_progress_map",sep="_", Sys.Date(),sep=".","png"), plot = hex_plot_gg, scale = 1,
width = 9, height = 6, units = c("in"), dpi = 600)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
wd_path <- dirname(rstudioapi::getActiveDocumentContext()$path)
library(RJSONIO)
library(stringi)
library(stringr)
library(readxl)
options(stringsAsFactors = F)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
master_df <- readRDS("all_zip_data_scrapped.rds")
zip_pkg_data <- zipWRUext2::zip_all_census2
View(zip_pkg_data)
parentDirectory <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(parentDirectory)
wi_data <- readRDS("data-raw/wi_voterfile_sample.rds")
setwd("zipWRUext2")
wi_data <- readRDS("data-raw/wi_voterfile_sample.rds")
head(wi_data)
wi_data <- readRDS("data-raw/wi_voterfile_sample.rds")
wi_data <- subset(wi_data, select=c(lastname,county,zcta5))
usethis::use_data(wi_data, overwrite = TRUE)
sources_dataframe <- readRDS("data-raw/sources_bisg_zipcodes.csv")
saveRDS(sources_df, "sources_bisg_zipcodes.rds", row.names = FALSE)
saveRDS(sources_df, "sources_bisg_zipcodes.rds")
sources_df <- read.csv("sources_bisg_zipcodes.csv")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
sources_df <- read.csv("sources_bisg_zipcodes.csv")
saveRDS(sources_df, "sources_bisg_zipcodes.rds")
parentDirectory <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(parentDirectory)
setwd("zipWRUext2")
sources_dataframe <- readRDS("data-raw/sources_bisg_zipcodes.rds")
usethis::use_data(sources_dataframe, overwrite = TRUE)
str(sources_df)
parentDirectory <- dirname(rstudioapi::getActiveDocumentContext()$path)
setwd(parentDirectory)
setwd("zipWRUext2")
library("devtools")
library("roxygen2")
library(usethis)
document()
usethis::use_data_raw(name = 'sources_dataframe')
document()
document()
